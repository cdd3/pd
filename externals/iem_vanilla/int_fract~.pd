#N canvas 294 185 581 369 10;
#X obj 51 68 inlet~;
#X obj 52 238 outlet~;
#X text 91 68 ~signal_in~;
#X obj 52 152 +~ 1.25829e+007;
#X obj 52 178 -~ 1.25829e+007;
#X obj 182 67 loadbang;
#X text 218 130 1.5 * 2 ^ 23;
#X obj 118 238 outlet~;
#X text 21 257 ~signal_int~;
#X text 120 257 ~signal_fract~;
#X obj 118 214 -~;
#X text 20 270 integer-part;
#X text 122 272 fractional-part: 0 .. 0.99999...;
#X msg 182 89 2 23;
#X obj 182 110 pow;
#X obj 182 130 * 1.5;
#X obj 52 125 -~ 0.5;
#X text 218 157 Every odd integer number is separated a bit inaccurately.
;
#X text 246 173 (the fractional part is 1);
#X text 215 189 This should be tolerable for musical purposes.;
#N canvas 570 18 617 458 (subpatch) 0;
#X obj 100 100 cnv 1 2 2 empty empty empty 20 12 0 14 -262144 -66577
0;
#X obj 119 13 loadbang;
#X obj 138 194 spigot 1;
#X msg 119 72 1;
#X obj 183 171 == 0;
#X obj 109 148 v;
#X obj 183 149 v;
#X obj 119 37 t b b b b;
#N canvas 0 50 450 336 (subpatch) 0;
#X msg 122 226 set \$1;
#X obj 112 248 makefilename;
#X obj 122 183 symbol;
#X obj 90 161 t f b;
#X obj 112 88 list append;
#X obj 112 111 list split 1;
#X obj 112 61 until;
#X obj 193 136 t b b;
#X obj 112 37 t b l b;
#X msg 161 161 symbol;
#X obj 128 271 symbol;
#X obj 122 205 makefilename %s%%c;
#X obj 112 16 inlet;
#X obj 128 294 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 1;
#X connect 1 0 10 1;
#X connect 2 0 11 0;
#X connect 3 0 1 0;
#X connect 3 1 2 0;
#X connect 4 0 5 0;
#X connect 5 0 3 0;
#X connect 5 1 4 1;
#X connect 5 2 7 0;
#X connect 6 0 4 0;
#X connect 7 0 10 0;
#X connect 7 1 6 1;
#X connect 8 0 6 0;
#X connect 8 1 4 0;
#X connect 8 2 9 0;
#X connect 9 0 2 1;
#X connect 10 0 13 0;
#X connect 11 0 0 0;
#X connect 12 0 8 0;
#X restore 185 101 pd;
#X msg 185 69 107 54 74 53 98 56 118 50 99 49 108 48 120 53 70 54 105
51 109 56 74 54 114 52 100 51;
#X obj 138 335 route 1;
#X msg 138 315 1 \$1;
#X obj 138 356 print -n;
#N canvas 0 50 776 769 (subpatch) 0;
#X msg 123 510 set \$1;
#X obj 121 540 makefilename;
#X obj 123 467 symbol;
#X obj 81 439 t f b;
#X obj 112 88 list append;
#X obj 112 111 list split 1;
#X obj 112 61 until;
#X obj 194 420 t b b;
#X obj 112 37 t b l b;
#X msg 162 445 symbol;
#X obj 142 567 symbol;
#X obj 123 489 makefilename %s%%c;
#X obj 112 16 inlet;
#X obj 142 590 outlet;
#X obj 90 135 moses 0;
#X obj 86 177 * -1;
#X obj 84 206 t f b;
#X obj 107 305 spigot 0;
#X obj 87 277 spigot 1;
#X msg 122 245 0;
#X msg 167 276 1;
#X obj 100 363 f;
#X msg 198 276 0;
#X msg 152 245 1;
#X obj 99 385 until;
#X obj 108 326 t b b f;
#X obj 123 411 f;
#X obj 157 181 f;
#X obj 187 161 + 1;
#X obj 186 183 % 23;
#X obj 133 159 t f b;
#X obj 133 206 -, f 9;
#X msg 218 160 17;
#X connect 0 0 1 0;
#X connect 1 0 2 1;
#X connect 1 0 10 1;
#X connect 2 0 11 0;
#X connect 3 0 1 0;
#X connect 3 1 2 0;
#X connect 4 0 5 0;
#X connect 5 0 14 0;
#X connect 5 1 4 1;
#X connect 5 2 7 0;
#X connect 6 0 4 0;
#X connect 7 0 10 0;
#X connect 7 1 6 1;
#X connect 8 0 6 0;
#X connect 8 1 4 0;
#X connect 8 2 9 0;
#X connect 8 2 32 0;
#X connect 9 0 2 1;
#X connect 10 0 13 0;
#X connect 11 0 0 0;
#X connect 12 0 8 0;
#X connect 14 0 15 0;
#X connect 14 1 30 0;
#X connect 15 0 16 0;
#X connect 16 0 21 1;
#X connect 16 1 19 0;
#X connect 16 1 20 0;
#X connect 17 0 25 0;
#X connect 18 0 3 0;
#X connect 19 0 18 1;
#X connect 20 0 17 1;
#X connect 21 0 24 0;
#X connect 22 0 17 1;
#X connect 23 0 18 1;
#X connect 24 0 26 0;
#X connect 25 0 22 0;
#X connect 25 0 23 0;
#X connect 25 1 21 0;
#X connect 25 2 26 1;
#X connect 26 0 3 0;
#X connect 27 0 28 0;
#X connect 28 0 29 0;
#X connect 29 0 27 1;
#X connect 29 0 31 1;
#X connect 30 0 31 0;
#X connect 30 1 27 0;
#X connect 31 0 18 0;
#X connect 31 0 17 0;
#X connect 32 0 28 0;
#X restore 138 294 pd;
#X msg 138 217 143 -36 62 31 146 -13 32 106 103 112 99 123 103 117
113 117 118 108 22 137 46 47 48 57 117 60 52 53 106 104 112 111 100
119 37 83 124 123 114 118 43 62 61 62 63 48 62 50 69 68 70 79 10 125
34 35 36 114 123 122 113 117 74 116 113 122 60 112 132 49 50 51 93
90 99 32 76 87 74 48 37 77 121 105 131 20 50 -36 54;
#X connect 1 0 7 0;
#X connect 2 0 14 0;
#X connect 3 0 5 0;
#X connect 4 0 2 1;
#X connect 6 0 4 0;
#X connect 7 0 3 0;
#X connect 7 1 2 0;
#X connect 7 2 6 0;
#X connect 7 3 9 0;
#X connect 8 0 6 1;
#X connect 8 0 5 1;
#X connect 9 0 8 0;
#X connect 10 0 12 0;
#X connect 11 0 10 0;
#X connect 13 0 11 0;
#X connect 14 0 13 0;
#X coords 0 -1 1 1 1 1 2 100 100;
#X restore 44 5 pd;
#X text 11 13 int_fract~;
#X text 138 24 separate the integer part from the fractional part;
#X text 153 9 a very efficient algorithm to;
#X text 361 325 IEM KUG;
#X text 345 313 musil;
#X text 375 313 @;
#X text 381 313 iem.at;
#X text 344 335 Graz \, Austria;
#X text 296 302 (c) Thomas Musil 2000 - 2019;
#X text 356 289 iem_vanilla;
#X text 166 39 of a 32 bit floating-point signal;
#X connect 0 0 10 0;
#X connect 0 0 16 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X connect 4 0 10 1;
#X connect 5 0 13 0;
#X connect 10 0 7 0;
#X connect 13 0 14 0;
#X connect 14 0 15 0;
#X connect 15 0 3 1;
#X connect 15 0 4 1;
#X connect 16 0 3 0;
